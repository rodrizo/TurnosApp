#pragma checksum "C:\Turnos\Views\Turno\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ba771733beaf9ff09aada0bb994aa32a75d6c991"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Turno_Index), @"mvc.1.0.view", @"/Views/Turno/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Turnos\Views\_ViewImports.cshtml"
using Turnos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Turnos\Views\_ViewImports.cshtml"
using Turnos.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ba771733beaf9ff09aada0bb994aa32a75d6c991", @"/Views/Turno/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d5b9c7a7584d54ef9e045a44f17b50f6dc5da374", @"/Views/_ViewImports.cshtml")]
    public class Views_Turno_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Turnos.Models.Turno>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar/fullcalendar.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar/fullcalendar.print.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("media", new global::Microsoft.AspNetCore.Html.HtmlString("print"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar/fullcalendar.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/fullcalendar/locale/es.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Turnos\Views\Turno\Index.cshtml"
Write(Html.AntiForgeryToken());

#line default
#line hidden
#nullable disable
            WriteLiteral(" ");
            WriteLiteral("\r\n");
#nullable restore
#line 3 "C:\Turnos\Views\Turno\Index.cshtml"
  
    ViewBag.Title = "Asignación de turnos";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"row\">\r\n    <div class=\"col s6\">\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba771733beaf9ff09aada0bb994aa32a75d6c9916124", async() => {
                WriteLiteral("Médico");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 9 "C:\Turnos\Views\Turno\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.IdMedico);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba771733beaf9ff09aada0bb994aa32a75d6c9917564", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 10 "C:\Turnos\Views\Turno\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.IdMedico);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 10 "C:\Turnos\Views\Turno\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = ViewBag.IdMedico;

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    </div>\r\n    <div class=\"col s6\">\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("label", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba771733beaf9ff09aada0bb994aa32a75d6c9919433", async() => {
                WriteLiteral("Paciente");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.LabelTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper);
#nullable restore
#line 13 "C:\Turnos\Views\Turno\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.IdPaciente);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_LabelTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba771733beaf9ff09aada0bb994aa32a75d6c99110878", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
#nullable restore
#line 14 "C:\Turnos\Views\Turno\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For = ModelExpressionProvider.CreateModelExpression(ViewData, __model => __model.IdPaciente);

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-for", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.For, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
#nullable restore
#line 14 "C:\Turnos\Views\Turno\Index.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = ViewBag.IdPaciente;

#line default
#line hidden
#nullable disable
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n    </div>\r\n</div>\r\n<br />\r\n\r\n<div id=\"ModalTurno\" class=\"modal\"> \r\n    <div class=\"modal-content\">\r\n        <h4>Turno</h4>\r\n        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba771733beaf9ff09aada0bb994aa32a75d6c99112853", async() => {
                WriteLiteral(@"
            <div>
                <label>Inicio</label>
                <input type=""text"" id=""txtFechaHoraInicio"" readonly=""readonly"">
            </div>
            <div>
                <label>Fin</label>
                <input type=""text"" id=""txtFechaHoraFin"" readonly=""readonly"">
            </div>
            <div>
                <label>Paciente</label>
                <input type=""text"" id=""txtPaciente"" readonly=""readonly""> 
            </div>

        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    </div>
    <div class=""modal-footer"">
        <a href=""#"" id=""btnEliminar"" class=""modal-close waves-effect waves-red btn-flat"">Eliminar</a> 
        <a href=""#"" id=""btnGuardar"" class=""modal-close waves-effect waves-green btn-flat"">Guardar</a> 
        <a href=""#"" id=""btnCerrar"" class=""modal-close waves-effect waves-grey btn-flat"">Cerrar</a> 
    </div>
</div>

<div id=""CalendarioTurnos""></div>
 
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ba771733beaf9ff09aada0bb994aa32a75d6c99115013", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ba771733beaf9ff09aada0bb994aa32a75d6c99116128", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.18.1/moment.min.js\"></script>\r\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba771733beaf9ff09aada0bb994aa32a75d6c99117519", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ba771733beaf9ff09aada0bb994aa32a75d6c99118615", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
<script>
    $(document).ready(function () {
        $('.modal').modal(); //Inicializar los eventos show y hide del modal
        var horarioDesde = """";//para delimitar el calendario
        var horarioHasta = """";//
        var turnos = []; //array
        var turnoSeleccionado = [];

        ObtenerTurnosYActualizar($('#IdMedico').val()); //Seleccionamos el valor del IdMedico

        $('#IdMedico').change(function(){ //Actualiza el calendario según el médico que se seleccione
            ObtenerTurnosYActualizar(this.value);

        });


        function ObtenerTurnosYActualizar(idMedico){
            turnos = [];
            $.ajax({
                type: ""GET"",
                url: ""Turno/ObtenerTurnos"", //Se va a ir al controlador, y manda a llamar la acción ObtenerTurno
                data: { 'IdMedico' : idMedico },
                success: function(datos) {
                    $.each(datos, function (i, v){
                        //poner iniciales en minuscula, referente ");
                WriteLiteral(@"a idTurno, etc
                        turnos.push({ //Se irán creando nuevos elementos en el array turnos
                            //Se le añade el valor del objeto a cada uno
                            idTurno : v.idTurno,
                            idPaciente : v.idPaciente,
                            idMedico : v.idMedico,
                            start: moment(v.fechaHoraInicio).format('YYYY-MM-DD[T]HH:mm:ss'), //moment pertenece a la librería que incluimos
                            end: v.fechaHoraFin != null ? moment(v.fechaHoraFin).format('YYYY-MM-DD[T]HH:mm:ss'): null,
                            paciente: v.paciente,
                            //if fechaHoraFin != null, entonces (moment.x), sino, null
                            //Preguntamos que si la propiedad fechaHoraFin es distinto de null, se le aplica moment
                            //Esto por si no se tiene fecha de finalización
                            //start y end las necesita el calendario para establecer el");
                WriteLiteral(@" horario exacto en el que el turno se especifica
                        });
                    })
                    GenerarCalendario(turnos); //se genera el calendario
                },
                error: function(){
                    alert('Error al obtener turnos');
                }
            })
        }

        function GenerarCalendario(turnos){ //Creamos esta función para borrar calendarios anteriores, 
                                            //con el fin de que salgan calendarios diferentes según el médico
            $.ajax({ //utilizamos el metodo ajax, ya viene incorporada en la librería JQuery, invocamos endpoints de horario con este metodo
                type: ""GET"", //petición para enviar parametros a traves de la URL
                url: ""Medico/TraerHorarioAtencionDesde"",
                data: { ""idMedico"": $('#IdMedico').val() }, //Accedemos al elemento select del medico, con el simbolo $
                async: false, //se ejecutará de manera asíncrona
  ");
                WriteLiteral(@"              success: function (resultado){
                    horarioDesde = resultado; //si el metodo ajax retorna una respuesta success, coloca el resultado en ""resultado""
                },
                error: function (){
                    alert(""Error al traer el horario de atención desde el médico."");//de ser un resultado erroneo, nos lanza un alert
                }
            });

            $.ajax({ //utilizamos el metodo ajax, ya viene incorporada en la librería JQuery, invocamos endpoints de horario con este metodo
                type: ""GET"", //petición para enviar parametros a traves de la URL
                url: ""Medico/TraerHorarioAtencionHasta"",
                data: { ""idMedico"": $('#IdMedico').val() }, //Accedemos al elemento select del medico, con el simbolo $
                async: false, //se ejecutará de manera asíncrona
                success: function (resultado) {
                    horarioHasta = resultado; //si el metodo ajax retorna una respuesta success,");
                WriteLiteral(@" coloca el resultado en ""resultado""
                },
                error: function () {
                    alert(""Error al traer el horario de atención hasta el médico."");//de ser un resultado erroneo, nos lanza un alert
                }
            });


            $(""#CalendarioTurnos"").fullCalendar('destroy');//Destruimos el calendario, desaparece, y posteriormente
                                                            //se crea con las nuevas propiedades de los nuevos turnos

            $('#CalendarioTurnos').fullCalendar({
                contentHeight: 'auto',
                defaultDate: new Date(),
                slotLabelFormat: ""HH:mm"", //formato de horas
                defaultView: 'agendaWeek', //vista semanal, por default, puede cambiarse a dia o mes
                header: { //seccion header, aparecerán botones según lo que agreguemos
                    left: 'prev, next today', //boton de semana previa, semana posterior, y redirigir a hoy
                    ri");
                WriteLiteral(@"ght: 'month, agendaWeek, agendaDay',
                },
                slotDuration: '00:30', //duración 
                nowIndicator: true, //indicador de hora actual
                allDaySlot: false,
                selectable: true, //seleccionar la celda correspondiente a un intervalo de turnos
                eventLimit: true, //determinar un limite en el evento que definimos, con posibilidad de establecerlo en 30min
                minTime: horarioDesde, //Se puede delimitar el calendario según la hora minima y maxima
                maxTime: horarioHasta, //en este caso, sería el horario de los médicos
                events: turnos, 
                select: function(fechaHoraInicio, fechaHoraFin){ //colocará las fechas que tiene establecida el objeto
                    turnoSeleccionado = { //igual a 0, para que el modal se abra, y se proceda a crear el turno
                        idTurno: 0,
                        start: fechaHoraInicio,
                        end: fechaHoraFin");
                WriteLiteral(@"
                    };
                    AbrirPopup();
                },
                eventClick: function (turnoClickeado){
                    turnoSeleccionado = turnoClickeado;  //sobreescribir un objeto con el otro
                    AbrirPopup();
                } //Esta propiedad se dispara cuando clickeamos a un turno que está creado
            })

        }

        function AbrirPopup()
        {
            $('#txtFechaHoraInicio').val(turnoSeleccionado.start.format('YYYY-MM-DD')+'T'+turnoSeleccionado.start.format('HH:mm:ss'));
            $('#txtFechaHoraFin').val(turnoSeleccionado.end.format('YYYY-MM-DD')+'T'+turnoSeleccionado.end.format('HH:mm:ss'));
             //formateamos el resultado que obtiene la fecha del turno
            if(turnoSeleccionado.idTurno == 0){//si el turno no existe, se oculta el botón eliminar
                $('#btnGuardar').show();
                $('#btnEliminar').hide();
                $('#txtPaciente').val($('#IdPaciente option:selected'");
                WriteLiteral(@").text());//accedemos al texto del listbox que está seleccionado
            }else{//si el turno existe, se habilita la opción eliminar
                $('#btnGuardar').hide();
                $('#btnEliminar').show();
                $('#txtPaciente').val(turnoSeleccionado.paciente);
            }
            $('#ModalTurno').modal('open');//el modal se muestra en la app
        }

        $('#btnGuardar').click(function(){
            var datosDelTurno = {
                IdPaciente: $('#IdPaciente').val(),
                IdMedico: $('#IdMedico').val(),
                fechaHoraInicio: $('#txtFechaHoraInicio').val(),
                fechaHoraFin: $('#txtFechaHoraFin').val()
            }
            GrabarTurno(datosDelTurno);
        }) //identifica si se hace click en el botón

        function GrabarTurno(data){
            $.ajax({
                type: ""POST"",
                url: 'Turno/GrabarTurno',
                data: {'turno': data}, 
                //Obtenemos el valor ");
                WriteLiteral(@"del elemento oculto que se genera en la vista, lo reconocerá y validará correctamente en el header
                headers: {'RequestVerificationToken' : $('input[name=""__RequestVerificationToken""]').val()},
                success: function (e) { //si la grabación sale exitosa, e = ok, usando el idmedico como parametro
                    if (e.ok){
                        ObtenerTurnosYActualizar($('#IdMedico').val());//se visualizará el turno automáticamente
                    }
                },
                error: function(){
                    alert('Error al grabar el turno');
                }

            })
        }

        $('#btnEliminar').click(function(){
            if (confirm('¿Está seguro de eliminar el turno?')){
                $.ajax({
                    type: ""POST"",
                    url: 'Turno/EliminarTurno',
                    data: {'IdTurno' : turnoSeleccionado.idTurno },
                    headers: {'RequestVerificationToken' : $('input[name=""__Req");
                WriteLiteral(@"uestVerificationToken""]').val()},
                    success: function (e){
                        if (e.ok){
                            ObtenerTurnosYActualizar($('#IdMedico').val());
                        }
                    },
                    error: function(){
                        alert('Error al eliminar turno');   
                    }
                })
            }
        })
    })
</script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Turnos.Models.Turno> Html { get; private set; }
    }
}
#pragma warning restore 1591
